{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "g2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Mappings": {
    "AZs": {
      "us-east-1": {
        "PRI": "us-east-1d",
        "SEC": "us-east-1c"
      },
      "us-west-2": {
        "PRI": "us-west-2c",
        "SEC": "us-west-2b"
      },
      "us-west-1": {
        "PRI": "us-west-1c",
        "SEC": "us-west-1b"
      },
      "eu-west-1": {
        "PRI": "eu-west-1c",
        "SEC": "eu-west-1b"
      },
      "ap-southeast-1": {
        "PRI": "ap-southeast-1b",
        "SEC": "ap-southeast-1a"
      },
      "ap-northeast-1": {
        "PRI": "ap-northeast-1c",
        "SEC": "ap-northeast-1a"
      },
      "ap-southeast-2": {
        "PRI": "ap-southeast-2b",
        "SEC": "ap-southeast-2a"
      },
      "sa-east-1": {
        "PRI": "sa-east-1b",
        "SEC": "sa-east-1a"
      }
    },
    "MPAmimotov4": {
      "us-east-1": {
        "AMI": "ami-ca148fa2",
        "Location": "Virginia"
      },
      "us-west-2": {
        "AMI": "ami-83e8bfb3",
        "Location": "Oregon"
      },
      "us-west-1": {
        "AMI": "ami-950d1ed0",
        "Location": "N.California"
      },
      "eu-west-1": {
        "AMI": "ami-d275c8a5",
        "Location": "EU_Ireland"
      },
      "ap-southeast-1": {
        "AMI": "ami-bf725eed",
        "Location": "Singapore"
      },
      "ap-southeast-2": {
        "AMI": "ami-4fcfa675",
        "Location": "Sydney"
      },
      "ap-northeast-1": {
        "AMI": "ami-0e00030f",
        "Location": "Tokyo"
      },
      "sa-east-1": {
        "AMI": "ami-63de6e7e",
        "Location": "Sao_Paul"
      }
    },
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "Public": {
        "CIDR": "10.0.0.0/24"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "Public",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "TCP:80",
          "Timeout": "10",
          "UnhealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "sgAMIMOTO11AutogenByAWSMP"
          }
        ],
        "Instances": [
          {
            "Ref": "AmimotoSingle"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      }
    },
    "AmimotoSingle": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId": {
          "Fn::FindInMap": [
            "MPAmimotov4",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "mp-amimoto"
          }
        ],
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "GroupSet": [
              {
                "Ref": "sgAMIMOTO11AutogenByAWSMP"
              }
            ],
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ]
      }
    },
    "sgAMIMOTO11AutogenByAWSMP": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "This security group was generated by AWS Marketplace and is based on recommended settings for AMIMOTO version 11 provided by DigitalCube Co Ltd",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },
  "Description": "",
  "Outputs": {
    "WebSiteURL": {
      "Description": "WordPress Site URL (Please wait a few minutes for the upgrade of WordPress to access for the first time.)",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "LoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}
